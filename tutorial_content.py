from tutorial_db import Session, TutorialPageContent

def add_tutorial_content_to_database():
    session = Session()
    session.query(TutorialPageContent).delete()

    content_entries = [
        TutorialPageContent(title="INTRODUCTION",
                            content="\nSQL Injection (SQLi) is a hacking technique that targets web applications, exploiting vulnerabilities to gain unauthorized access to databases. Attackers can manipulate input fields on a website, such as search boxes or login forms, to inject malicious SQL code. This code can then be used to access, modify, or delete sensitive data stored in the database.For example, an attacker could use SQLi to bypass authentication on a website's login page, gaining access to user accounts and possibly even administrative privileges. This type of attack can lead to data breaches, identity theft, and other serious security incidents..\n\nIn this tutorial, we'll cover everything you need to know about SQLi, from how it works to how to prevent it. By the end, you'll have the knowledge and tools to keep yourself safe while browsing the web. So, let's dive in and learn more about this important topic!"),

        TutorialPageContent(title="SQL INJECTION", 
                            content="\nSQL Injection (SQLi) is a prevalent and dangerous cyber attack method that targets the database layer of web applications. This technique exploits vulnerabilities in the way applications handle user input, allowing attackers to insert malicious SQL code into input fields such as login forms, search boxes, or URL parameters. When the application processes this input without proper validation, the injected SQL commands are executed directly by the database.The primary objective of SQL Injection attacks is to manipulate the application's database queries to perform unauthorized actions. For example, an attacker might input a specially crafted SQL statement into a login form to bypass authentication checks, gaining access to user accounts without knowing their passwords. Other potential consequences include the ability to read sensitive data (like personal information or credit card details), modify or delete database records, and execute administrative operations on the database.."),

        TutorialPageContent(title=" SQL", 
                            content="\nSQL (Structured Query Language) is a standard programming language used for managing and manipulating relational databases.  It allows users to perform a wide range of operations on databases, such as querying data, inserting new records, updating existing records, and deleting records.SQL is essential for interacting with databases and is used in various applications and industries for data management purposes.\n\nFor example, to retrieve all records from a table named `customers`, you would use the following SQL query:\nSELECT * FROM customers;\n\nTo insert a new record into the `customers` table, you would use an `INSERT` query like this:\nINSERT INTO customers (name, email) VALUES ('John Doe', 'john.doe@example.com');\n\nTo update an existing record in the `customers` table, you would use an `UPDATE` query like this:\nUPDATE customers SET email = 'jane.doe@example.com' WHERE name = 'Jane Doe';\n\nTo delete a record from the `customers` table, you would use a `DELETE` query like this:\nDELETE FROM customers WHERE name = 'John Doe';"),

        TutorialPageContent(title="EXPLOITATION", 
                            content="\nSQL injection (SQLi) is exploited by attackers to manipulate the SQL queries that an application sends to its database. This manipulation is achieved by inserting malicious SQL code into input fields, such as login forms or search boxes, which is then executed by the application's database.For example, consider a login form that accepts a username and password. If the application's code does not properly sanitize or validate user input, an attacker can input something like `' OR 1=1 --` into the username field. When the application constructs the SQL query to check the credentials, it might look something like this:\n\nSELECT * FROM users WHERE username = '' OR 1=1 --' AND password = 'input_password'; \n\nIn this example, the injected SQL code `OR 1=1 --` causes the query to return all rows from the `users` table because `1=1` is always true. The `--` indicates a comment in SQL, effectively commenting out the rest of the query, including the legitimate password check.By exploiting SQL injection vulnerabilities, attackers can bypass authentication, access sensitive information, modify or delete data, and even take control of the entire database server. It is important for developers to implement proper input validation and use parameterized queries to prevent SQL injection attacks."),
        TutorialPageContent(title="SQLi Exploitation Tools", 
                            content="\nSQL injection (SQLi) exploitation can be facilitated by various tools designed to automate the process of identifying and exploiting SQL injection vulnerabilities. These tools are typically used by penetration testers and security researchers to assess the security of web applications. Some common tools used for SQL injection exploitation include:\n\n1. **SQLMap**: SQLMap is one of the most popular open-source penetration testing tools for detecting and exploiting SQL injection vulnerabilities. It automates the process of identifying vulnerable parameters and executing SQL injection attacks to extract information from databases.\n\n2.Burp Suite: Burp Suite is a comprehensive web application security testing tool that includes a scanner capable of detecting SQL injection vulnerabilities. It can also be used to intercept and modify HTTP requests, making it useful for manual SQL injection testing.\n\n3. Netsparker: Netsparker is a web application security scanner that can automatically detect SQL injection vulnerabilities in web applications. It provides detailed reports of vulnerabilities and recommended fixes.\n\n4. Acunetix: Acunetix is another web vulnerability scanner that can detect SQL injection vulnerabilities in web applications. It also provides tools for manual testing and verification of vulnerabilities.\n\n5. \QLNinja: SQLNinja is a tool specifically designed for exploiting SQL injection vulnerabilities. It can automate the process of identifying vulnerable parameters and extracting data from databases.\n\nThese tools can be used by security professionals to test the security of web applications and identify and fix SQL injection vulnerabilities before they can be exploited by malicious actors. However, it is important to use these tools responsibly and with proper authorization, as unauthorized use of these tools can be illegal and unethical."
                            ),       
        TutorialPageContent(title="Preventive Measures", 
                            content="Preventing SQL injection (SQLi) attacks is crucial for maintaining the security of web applications. Here are some key preventive measures:\n\n1. Use Parameterized Queries: Parameterized queries separate SQL code from user input, preventing attackers from injecting malicious SQL code. Most modern web frameworks and libraries support parameterized queries.\n\n2. Input Validation: Validate and sanitize user input to ensure that it meets expected formats and lengths. Reject input that contains special characters or patterns commonly used in SQL injection attacks.\n\n3. Least Privilege Principle: Limit database user permissions to only what is necessary for the application to function. Avoid using accounts with excessive privileges, as this can minimize the impact of a successful SQL injection attack.\n\n4.Avoid Dynamic SQL: Constructing SQL queries dynamically using user input can introduce vulnerabilities. Where possible, use static SQL queries or stored procedures.\n\n5. Database Firewalls: Use database firewalls to monitor and block suspicious SQL queries. These tools can help detect and prevent SQL injection attacks in real-time.\n\n6. Regular Security Audits: Perform regular security audits and vulnerability assessments of your web applications. This can help identify and fix potential SQL injection vulnerabilities before they can be exploited.\n\n7. Use Web Application Firewalls (WAF): WAFs can help filter out malicious requests, including SQL injection attacks, before they reach your web application\n\n8. Error Handling: Implement proper error handling to avoid exposing sensitive information in error messages. Ensure that error messages do not reveal database schema or other internal details.\n\n9. Security Headers: Use security headers such as Content Security Policy (CSP) to help prevent XSS attacks, which can be used to launch SQL injection attacks.\n\nImplementing these preventive measures can significantly reduce the risk of SQL injection attacks and help protect your web applications from unauthorized access and data breaches."),
        TutorialPageContent(title="SQLMAP",
                            content="SQLMap is an open-source penetration testing tool that automates the process of detecting and exploiting SQL injection flaws and taking over database servers.\n\nIdentifying a vulnerable URL:\nTo use SQLMap effective you need a target URL that you suspect is vulnerable to SQL injection. This is typically a URL with a query parameter, such as:\nhttp://example.com/page?id=1\n\nBasic Usage:\n1. Testing for vulnerability:\nOpen a terminal and type the following command:\n\nsqlmap -u (http://example.com/page?id=1)\n SQLMap will analyze the URL and test for various SQL injection vulnerabilities.\n2. Adding more options: \nTo get more detailed information, add the --dbs option, which tells SQLMap to list the databases available on the server:\nsqlmap -u (http://example.com/page?id=1) --dbs\nSQLMap will attempt to list all databases on the target server if the URL is vulnerable.\n\nIntermediate Usage:\n1. Selecting a Database:\nIf SQLMap finds databases, you can target a specific one using the -D option:\nsqlmap -u (http://example.com/page?id=1) -D database_name --tables\nThis command lists all tables in the specified database.\n2. Dumping Table Data:]\nTo extract data from a specific table, use the -T option followed by --dump:\nsqlmap -u (http://example.com/page?id=1) -D database_name -T table_name --dump\nThis command dumps all data from the specified table.\nAdvanced Usage:\n1. Bypassing WAFs and Firewalls:\n Web Application Firewalls (WAFs) and other security measures can block SQLMap. Use the --random-agent option to bypass some of these protections:\nsqlmap -u (http://example.com/page?id=1) --random-agent --dbs\n2. Providing Login Credentials:\nIf the web application requires authentication, you can provide SQLMap with login credentials:\nsqlmap -u (http://example.com/?pageid=1) --auth-type=basic --auth-cred=user:password --dbs\n3. Using POST Requests:\nFor forms that use POST requests, save the request in a text file (e.g., request.txt), then use the -r option:\nsqlmap -r request.txt --dbs\n\nBest Practices\n1. Ethical Considerations: Always have permission before testing any web application.\n2. Use Safely: Only use SQLMap in controlled environments or on systems where you have explicit permission. \n 3. Understand the Impact: Know that SQL injection can compromise sensitive data and the overall security of a system."),
    ]
    for entry in content_entries:
        session.add(entry)

    session.commit()

    session.close()